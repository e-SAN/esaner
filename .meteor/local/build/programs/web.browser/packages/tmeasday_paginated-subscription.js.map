)]}'
{"version":3,"file":"/packages/tmeasday:paginated-subscription.js","sources":["tmeasday:paginated-subscription/paginated_subscription.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iD;AACA,yB;AACA,wB;AACA,+C;AACA,mB;AACA,gD;AACA,C;;AAEA,2D;AACA,iC;AACA,sB;AACA,C;;AAEA,0D;AACA,gC;AACA,qB;AACA,C;;AAEA,0D;AACA,wC;AACA,C;;AAEA,a;AACA,4D;AACA,wB;AACA,C;;AAEA,iE;AACA,8B;AACA,iC;AACA,C;;AAEA,yD;AACA,6B;AACA,kC;AACA,C;;AAEA,0D;AACA,6B;AACA,iC;AACA,C;;;AAGA,gD;AACA,2E;AACA,sD;AACA,2B;AACA,E;AACA,wD;AACA,E;AACA,8C;AACA,6C;AACA,6C;AACA,O;AACA,I;AACA,mF;AACA,I;AACA,8E;AACA,iE;AACA,+B;AACA,4B;AACA,sB;AACA,O;AACA,K;AACA,E;AACA,uD;AACA,gC;AACA,E;AACA,gB;AACA,C","sourcesContent":["PaginatedSubscriptionHandle = function(perPage) {\n  this.perPage = perPage;\n  this._limit = perPage;\n  this._limitListeners = new Deps.Dependency();\n  this._loaded = 0;\n  this._loadedListeners = new Deps.Dependency();\n}\n\nPaginatedSubscriptionHandle.prototype.loaded = function() {\n  this._loadedListeners.depend();\n  return this._loaded;\n}\n\nPaginatedSubscriptionHandle.prototype.limit = function() {\n  this._limitListeners.depend();\n  return this._limit;\n}\n\nPaginatedSubscriptionHandle.prototype.ready = function() {\n  return this.loaded() === this.limit();\n}\n\n// deprecated\nPaginatedSubscriptionHandle.prototype.loading = function() {\n  return ! this.ready();\n}\n\nPaginatedSubscriptionHandle.prototype.loadNextPage = function() {\n  this._limit += this.perPage;\n  this._limitListeners.changed();\n}\n\nPaginatedSubscriptionHandle.prototype.done = function() {\n  this._loaded = this._limit;\n  this._loadedListeners.changed();\n}\n\nPaginatedSubscriptionHandle.prototype.reset = function() {\n  this._limit = this.perPage;\n  this._limitListeners.changed();\n}\n\n\n// XXX: deal with last argument being a callback\nMeteor.subscribeWithPagination = function (/*name, arguments, perPage */) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  var perPage = args.pop();\n  \n  var handle = new PaginatedSubscriptionHandle(perPage);\n  \n  var argAutorun = Meteor.autorun(function() {\n    var ourArgs = _.map(args, function(arg) {\n      return _.isFunction(arg) ? arg() : arg;\n    });\n    \n    var subHandle = Meteor.subscribe.apply(this, ourArgs.concat([handle.limit()]));\n    \n    // whenever the sub becomes ready, we are done. This may happen right away\n    // if we are re-subscribing to an already ready subscription.\n    Meteor.autorun(function() {\n      if (subHandle.ready())\n        handle.done();\n    });\n  });\n  \n  // this will stop the subHandle, and the done autorun\n  handle.stop = argAutorun.stop;\n  \n  return handle;\n}"]}