)]}'
{"version":3,"file":"/packages/mizzao:user-status.js","sources":["mizzao:user-status/monitor.coffee"],"names":[],"mappings":"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","sourcesContent":["###\n  The idle monitor watches for mouse, keyboard, and blur events,\n  and reports idle status to the server.\n\n  It uses TimeSync to report accurate time.\n\n  Everything is reactive, of course!\n###\n\n# State variables\nmonitorId = null\nidle = false\nlastActivityTime = undefined\n\nmonitorDep = new Deps.Dependency\nidleDep = new Deps.Dependency\nactivityDep = new Deps.Dependency\n\nfocused = true\n\n# These settings are internal or exported for test only\nMonitorInternals = {\n  idleThreshold: null\n  idleOnBlur: false\n\n  computeState: (lastActiveTime, currentTime, isWindowFocused) ->\n    inactiveTime = currentTime - lastActiveTime\n    return true if MonitorInternals.idleOnBlur and not isWindowFocused\n    return if (inactiveTime > MonitorInternals.idleThreshold) then true else false\n\n  connectionChange: (isConnected, wasConnected) ->\n    # We only need to do something if we reconnect and we are idle\n    # Don't get idle status reactively, as this function only\n    # takes care of reconnect status and doesn't care if it changes.\n\n    # Note that userId does not change during a resume login, as designed by Meteor.\n    # However, the idle state is tied to the connection and not the userId.\n    if isConnected and !wasConnected and idle\n      MonitorInternals.reportIdle(lastActivityTime)\n\n  onWindowBlur: ->\n    focused = false\n    monitor()\n\n  onWindowFocus: ->\n    focused = true\n    # Focusing should count as an action, otherwise \"active\" event may be\n    # triggered at some point in the past!\n    monitor(true)\n\n  reportIdle: (time) ->\n    Meteor.call \"user-status-idle\", time\n\n  reportActive: (time) ->\n    Meteor.call \"user-status-active\", time\n\n}\n\nstart = (settings) ->\n  throw new Error(\"Can't start idle monitor until synced to server\") unless TimeSync.isSynced()\n  throw new Error(\"Idle monitor is already active. Stop it first.\") if monitorId\n\n  settings = settings || {}\n\n  # The amount of time before a user is marked idle\n  MonitorInternals.idleThreshold = settings.threshold || 60000\n\n  # Don't check too quickly; it doesn't matter anyway: http://stackoverflow.com/q/15871942/586086\n  interval = Math.max(settings.interval || 1000, 1000)\n\n  # Whether blurring the window should immediately cause the user to go idle\n  MonitorInternals.idleOnBlur = if settings.idleOnBlur? then settings.idleOnBlur else false\n\n  # Set new monitoring interval\n  monitorId = Meteor.setInterval(monitor, interval)\n  monitorDep.changed()\n\n  # Reset last activity; can't count inactivity from some arbitrary time\n  unless lastActivityTime?\n    lastActivityTime = Deps.nonreactive -> TimeSync.serverTime()\n    activityDep.changed()\n\n  monitor()\n  return\n\nstop = ->\n  throw new Error(\"Idle monitor is not running.\") unless monitorId\n\n  Meteor.clearInterval(monitorId)\n  monitorId = null\n  lastActivityTime = undefined # If monitor started again, we shouldn't re-use this time\n  monitorDep.changed()\n\n  if idle # Un-set any idleness\n    idle = false\n    idleDep.changed()\n    # need to run this because the Deps below won't re-run when monitor is off\n    MonitorInternals.reportActive( Deps.nonreactive -> TimeSync.serverTime() )\n\n  return\n\nmonitor = (setAction) ->\n  # Ignore focus/blur events when we aren't monitoring\n  return unless monitorId\n\n  # We use setAction here to not have to call serverTime twice. Premature optimization?\n  currentTime = Deps.nonreactive -> TimeSync.serverTime()\n  # Can't monitor if we haven't synced with server yet, or lost our sync.\n  return unless currentTime?\n\n  # Update action as long as we're not blurred and idling on blur\n  # We ignore actions that happen while a client is blurred, if idleOnBlur is set.\n  if setAction and (focused or !MonitorInternals.idleOnBlur)\n    lastActivityTime = currentTime\n    activityDep.changed()\n\n  newIdle = MonitorInternals.computeState(lastActivityTime, currentTime, focused)\n\n  if newIdle isnt idle\n    idle = newIdle\n    idleDep.changed()\n  return\n\ntouch = ->\n  unless monitorId\n    Meteor._debug(\"Cannot touch as idle monitor is not running.\")\n    return\n  monitor(true) # Check for an idle state change right now\n\nisIdle = ->\n  idleDep.depend()\n  return idle\n\nisMonitoring = ->\n  monitorDep.depend()\n  return monitorId?\n\nlastActivity = ->\n  return unless isMonitoring()\n  activityDep.depend()\n  return lastActivityTime\n\nMeteor.startup ->\n  # Listen for mouse and keyboard events on window\n  # TODO other stuff - e.g. touch events?\n  $(window).on \"click keydown\", -> monitor(true)\n\n  # catch window blur events when requested and where supported\n  # We'll use jQuery here instead of window.blur so that other code can attach blur events:\n  # http://stackoverflow.com/q/22415296/586086\n  $(window).blur MonitorInternals.onWindowBlur\n  $(window).focus MonitorInternals.onWindowFocus\n\n  # First check initial state if window loaded while blurred\n  # Some browsers don't fire focus on load: http://stackoverflow.com/a/10325169/586086\n  focused = document.hasFocus()\n\n  # Report idle status whenever connection changes\n  Deps.autorun ->\n    # Don't report idle state unless we're monitoring\n    return unless isMonitoring()\n\n    # XXX These will buffer across a disconnection - do we want that?\n    # The idle report will result in a duplicate message (with below)\n    # The active report will result in a null op.\n    if isIdle()\n      MonitorInternals.reportIdle(lastActivityTime)\n    else\n      # If we were inactive, report that we are active again to the server\n      MonitorInternals.reportActive(lastActivityTime)\n    return\n\n  # If we reconnect and we were idle, make sure we send that upstream\n  wasConnected = Meteor.status().connected\n  Deps.autorun ->\n    connected = Meteor.status().connected\n    MonitorInternals.connectionChange(connected, wasConnected)\n\n    wasConnected = connected\n    return\n\n# export functions for starting and stopping idle monitor\nUserStatus = {\n  startMonitor: start\n  stopMonitor: stop\n  pingMonitor: touch\n  isIdle: isIdle\n  isMonitoring: isMonitoring\n  lastActivity: lastActivity\n}\n\n"]}