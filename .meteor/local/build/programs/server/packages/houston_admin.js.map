{"version":3,"file":"/packages/houston:admin.js","sources":["houston:admin/lib/collections.coffee","houston:admin/lib/shared.coffee","houston:admin/lib/menu.coffee","houston:admin/lib/methods.coffee","houston:admin/server/publications.coffee","houston:admin/server/exports.coffee"],"names":[],"mappings":"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","sourcesContent":["root = exports ? this\n\nroot.Houston ?= {}\n\nHouston._collections ?= {}\n\nHouston._collections.collections = new Meteor.Collection('houston_collections')\n\nHouston._admins = new Meteor.Collection('houston_admins')\n\nHouston._user_is_admin = (id) ->\n  return id? and Houston._admins.findOne user_id: id\n","root = exports ? this\n\nroot.Houston ?= {}\n\nHouston._houstonize = (name) -> \"_houston_#{name}\"\n\n# change _MAX_DOCS_TO_EXPLORE if you need us to explore more docs\nHouston._MAX_DOCS_TO_EXPLORE = 100\n\nHouston._get_fields_from_collection = (collection) ->\n  # TODO(AMK) randomly sample the documents in question\n  Houston._get_fields(collection.find().fetch())\n\nHouston._get_fields = (documents) ->\n  key_to_type = {_id: 'ObjectId'}\n\n  find_fields = (document, prefix='') ->\n    for key, value of _.omit(document, '_id')\n      if typeof value is 'object'\n\n        # handle dates like strings\n        if value instanceof Date\n          full_path_key = \"#{prefix}#{key}\"\n          key_to_type[full_path_key] = \"Date\"\n\n        # recurse into sub documents\n        else\n          find_fields value, \"#{prefix}#{key}.\"\n      else if typeof value isnt 'function'\n        full_path_key = \"#{prefix}#{key}\"\n        key_to_type[full_path_key] = typeof value\n\n  for document in documents[..Houston._MAX_DOCS_TO_EXPLORE]\n    find_fields document\n\n  (name: key, type: value for key, value of key_to_type)\n\nHouston._get_field_names = (documents) ->\n  _.pluck(Houston._get_fields(documents), 'name')\n\nHouston._INPUT_TYPES = {\n  number: 'number'\n  string: 'text'\n  boolean: 'checkbox'\n}\n","root = exports ? this\n\nroot.Houston ?= {}\n\nHouston.menu = () ->\n  @.menu._add_menu_item item for item in arguments\n  return\n\nHouston.menu.dependency = new Deps.Dependency\n\nHouston.menu._menu_items = []\n\nHouston.menu._process_item = (item) ->\n  if item.type isnt 'link' and item.type isnt 'template'\n    throw new Meteor.Error 400, 'Can\\'t recognize type: ' + item\n\n  if item.type is 'link'\n    item.path = item.use\n  else if item.type is 'template'\n    item.path = \"#{Houston._ROOT_ROUTE}/#{item.use}\"\n\n  return item\n\nHouston.menu._get_menu_items = ->\n  @dependency.depend()\n  @_process_item item for item in @_menu_items\n\nHouston.menu._add_menu_item = (item) ->\n  @_menu_items.push item\n  @dependency.changed()\n","# shared meteor methods\nHouston._setup_collection_methods = (collection) ->\n  name = collection._name\n  methods = {}\n  methods[Houston._houstonize \"#{name}_insert\"] = (doc) ->\n    check doc, Object\n    return unless Houston._user_is_admin @userId\n    collection.insert(doc)\n\n  methods[Houston._houstonize \"#{name}_update\"] = (id, update_dict) ->\n    check id, Match.Any\n    check update_dict, Object\n    return unless Houston._user_is_admin @userId\n    if collection.findOne(id)\n      collection.update(id, update_dict)\n    else\n      id = collection.findOne(new Meteor.Collection.ObjectID(id))\n      collection.update(id, update_dict)\n\n  methods[Houston._houstonize \"#{name}_delete\"] = (id) ->\n    check id, Match.Any\n    return unless Houston._user_is_admin @userId\n    if collection.findOne(id)\n      collection.remove(id)\n    else\n      id = collection.findOne(new Meteor.Collection.ObjectID(id))\n      collection.remove(id)\n\n  Meteor.methods(methods)\n","root = exports ? this\nHouston._HIDDEN_COLLECTIONS = {'users': Meteor.users, 'meteor_accounts_loginServiceConfiguration': undefined}\nADDED_COLLECTIONS = {}\n# TODO: describe what this is, exactly, and how it differs from Houston._collections.\n\nHouston._publish = (name, func) ->\n  Meteor.publish Houston._houstonize(name), func\n\nHouston._setup_collection = (collection) ->\n  name = collection._name\n  return if name of ADDED_COLLECTIONS\n\n  Houston._setup_collection_methods(collection)\n\n  Houston._publish name, (sort, filter, limit, unknown_arg) ->\n    check sort, Match.Optional(Object)\n    check filter, Match.Optional(Object)\n    check limit, Match.Optional(Number)\n    check unknown_arg, Match.Any\n    return unless Houston._user_is_admin @userId\n    try\n      collection.find(filter, sort: sort, limit: limit)\n    catch e\n      console.log e\n\n  collection.find().observe\n    _suppress_initial: true  # fixes houston for large initial datasets\n    added: (document) ->\n      Houston._collections.collections.update {name},\n        $inc: {count: 1},\n        $addToSet: fields: $each: Houston._get_fields([document])\n    removed: (document) -> Houston._collections.collections.update {name}, {$inc: {count: -1}}\n\n  fields = Houston._get_fields_from_collection(collection)\n  c = Houston._collections.collections.findOne {name}\n  count = collection.find().count()\n  if c\n    Houston._collections.collections.update c._id, {$set: {count, fields}}\n  else\n    Houston._collections.collections.insert {name, count, fields}\n  ADDED_COLLECTIONS[name] = collection\n\nsync_collections = ->\n  Houston._admins.findOne()\n\n  _sync_collections = (meh, collections_db) ->\n    collection_names = (col.collectionName for col in collections_db \\\n      when (col.collectionName.indexOf \"system.\") isnt 0 and\n           (col.collectionName.indexOf \"houston_\") isnt 0)\n\n    collection_names.forEach (name) ->\n      unless name of ADDED_COLLECTIONS or name of Houston._HIDDEN_COLLECTIONS\n        new_collection = null\n        try\n          new_collection = new Meteor.Collection(name)\n        catch e\n          for key, value of root\n            if name == value?._name # TODO here - typecheck also?\n              new_collection = value\n\n        if new_collection?  # found it!\n          Houston._setup_collection(new_collection)\n        else\n          console.log \"\"\"\nHouston: couldn't find access to the #{name} collection.\nIf you'd like to access the collection from Houston, either\n(1) make sure it is available as a global (top-level namespace) within the server or\n(2) add the collection manually via Houston.add_collection\n\"\"\"\n\n  bound_sync_collections = Meteor.bindEnvironment _sync_collections, (e) ->\n    console.log \"Failed while syncing collections for reason: #{e}\"\n\n  # MongoInternals is the 'right' solution as of 0.6.5\n  mongo_driver = MongoInternals?.defaultRemoteCollectionDriver() or Meteor._RemoteCollectionDriver\n  mongo_driver.mongo.db.collections bound_sync_collections\n\nMeteor.methods\n  _houston_make_admin: (user_id) ->\n    check user_id, String\n    # limit one admin\n    return if Houston._admins.findOne {'user_id': $exists: true}\n    Houston._admins.insert {user_id}\n    sync_collections() # reloads collections in case of new app\n    return true\n\n# publish our analysis of the app's collections\nHouston._publish 'collections', ->\n  unless Houston._user_is_admin @userId\n    @ready()\n    return\n  Houston._collections.collections.find()\n\n# TODO address inherent security issue\nHouston._publish 'admin_user', ->\n  Houston._admins.find {}\n\nMeteor.startup ->\n  sync_collections()\n","# Functions that Houston makes available to the app\nroot = exports ? this\n\n# Let Houston know about a collection manually, as an alternative\n# to the current autodiscovery process\nHouston.add_collection = (collection) ->\n  # TODO options arg can be used to configure admin UI like Django does\n  Houston._setup_collection(collection)\n\n# Hide a collection that is not wanted in Houston\nHouston.hide_collection = (collection) ->\n  Houston._HIDDEN_COLLECTIONS[collection._name] = collection\n  col = Houston._collections.collections.findOne({name: collection._name})\n  Houston._collections.collections.remove(col) if col?\n"]}