{"version":3,"file":"/packages/perak:user-roles.js","sources":["perak:user-roles/both/collections/users.js","perak:user-roles/server/collections/users.js","perak:user-roles/server/publications/admin_user.js","perak:user-roles/server/publications/admin_users.js","perak:user-roles/server/publications/current_user_data.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,qB;;AAEA,0C;AACA,0C;AACA,kE;AACA,E;;AAEA,+C;AACA,yC;AACA,2B;AACA,e;AACA,E;;AAEA,oD;AACA,sC;AACA,e;AACA,E;AACA,a;AACA,E;;AAEA,mC;AACA,yC;AACA,E;;AAEA,iD;AACA,yE;AACA,E;;;;;;;;;;;;;;;;;;;AC1BA,mD;AACA,yC;;AAEA,a;AACA,gE;AACA,0D;AACA,qC;AACA,6D;AACA,sE;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;ACVA,2C;AACA,2E;AACA,G;;;;;;;;;;;;;;;;;;;ACFA,0C;AACA,uH;AACA,G;;;;;;;;;;;;;;;;;;;ACFA,iD;AACA,uF;AACA,G","sourcesContent":["Users = Meteor.users;\n\nUsers.isInRole = function (userId, role) {\n  var user = Users.findOne({_id: userId});\n  return !!(user && user.roles && user.roles.indexOf(role) != -1);\n};\n\nUsers.isInRoles = function (userId, roleList) {\n\tvar user = Users.findOne({_id: userId});\n\tif(!user || !user.roles) {\n\t\treturn false;\n\t}\n\n\tvar granted = _.intersection(roleList, user.roles);\n\tif(!granted || granted.length == 0) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\nUsers.isAdmin = function (userId) {\n  return Users.isInRole(userId, \"admin\");\n};\n\nUsers.isAdminOrInRole = function (userId, role) {\n  return Users.isInRole(userId, \"admin\") || Users.isInRole(userId, role);\n};\n","// If you want to modify the rights on user updates\n// then add a new allow rule in your app.\n\nUsers.allow({\n\t// doesn't allow insert or removal of users from untrusted code\n    update: function (userId, doc, fieldNames, modifier) {\n        return Users.isAdmin(userId) \n        \t\t// only admins can update user roles via the client\n        \t\t|| (doc._id === userId && !_.contains(fieldNames, 'roles'));\n    }\n});","Meteor.publish(\"admin_user\", function(_id){\n\treturn Users.isAdmin(this.userId) ? Users.find({_id: _id}) : this.ready();\n});\n","Meteor.publish(\"admin_users\", function() {\n\treturn Users.isAdmin(this.userId) ? Meteor.users.find({}, {fields: {profile: 1, roles: 1, emails: 1}}) : this.ready();\n});\n","Meteor.publish(\"current_user_data\", function () {\n\treturn Meteor.users.find( { _id: this.userId }, { fields: {profile: 1 , roles: 1} } );\n});\n"]}