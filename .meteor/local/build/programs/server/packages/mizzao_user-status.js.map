{"version":3,"file":"/packages/mizzao:user-status.js","sources":["mizzao:user-status/status.coffee"],"names":[],"mappings":"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","sourcesContent":["###\n  Apparently, the new api.export takes care of issues here. No need to attach to global namespace.\n  See http://shiggyenterprises.wordpress.com/2013/09/09/meteor-packages-in-coffeescript-0-6-5/\n\n  We may want to make UserSessions a server collection to take advantage of indices.\n  Will implement if someone has enough online users to warrant it.\n###\nUserConnections = new Mongo.Collection(\"user_status_sessions\", { connection: null })\n\nstatusEvents = new (Npm.require('events').EventEmitter)()\n\n###\n  Multiplex login/logout events to status.online\n###\nstatusEvents.on \"connectionLogin\", (advice) ->\n  update =\n    $set: {\n      'status.online': true,\n      'status.lastLogin': {\n        date: advice.loginTime\n        ipAddr: advice.ipAddr\n        userAgent: advice.userAgent\n      }\n    }\n\n  # State change if ALL existing connections were idle, but this one isn't\n  conns = UserConnections.find(userId: advice.userId).fetch()\n  unless _.every(conns, (c) -> c.idle)\n    update.$unset =\n      'status.idle': null\n      'status.lastActivity': null\n\n  Meteor.users.update advice.userId, update\n  return\n\nstatusEvents.on \"connectionLogout\", (advice) ->\n  conns = UserConnections.find(userId: advice.userId).fetch()\n  if conns.length is 0\n    # Go offline if we are the last connection for this user\n    # This includes removing all idle information\n    Meteor.users.update advice.userId,\n      $set: {'status.online': false }\n      $unset:\n        'status.idle': null\n        'status.lastActivity': null\n  else if _.every(conns, (c) -> c.idle)\n    ###\n      All remaining connections are idle:\n      - If the last active connection quit, then we should go idle with the most recent activity\n\n      - If an idle connection quit, nothing should happen; specifically, if the\n        most recently active idle connection quit, we shouldn't tick the value backwards.\n        This may result in a no-op so we can be smart and skip the update.\n    ###\n    return if advice.lastActivity? # The dropped connection was already idle\n\n    Meteor.users.update advice.userId,\n      $set:\n        'status.idle': true\n        'status.lastActivity': _.max(_.pluck conns, \"lastActivity\")\n  return\n\n###\n  Multiplex idle/active events to status.idle\n  TODO: Hopefully this is quick because it's all in memory, but we can use indices if it turns out to be slow\n\n  TODO: There is a race condition when switching between tabs, leaving the user inactive while idle goes from one tab to the other.\n  It can probably be smoothed out.\n###\nstatusEvents.on \"connectionIdle\", (advice) ->\n  conns = UserConnections.find(userId: advice.userId).fetch()\n  return unless _.every(conns, (c) -> c.idle)\n  # Set user to idle if all the connections are idle\n  # This will not be the most recent idle across a disconnection, so we use max\n\n  # TODO: the race happens here where everyone was idle when we looked for them but now one of them isn't.\n  Meteor.users.update advice.userId,\n    $set:\n      'status.idle': true\n      'status.lastActivity': _.max(_.pluck conns, \"lastActivity\")\n  return\n\nstatusEvents.on \"connectionActive\", (advice) ->\n  Meteor.users.update advice.userId,\n    $unset:\n      'status.idle': null\n      'status.lastActivity': null\n  return\n\n# Clear any online users on startup (they will re-add themselves)\n# Having no status.online is equivalent to status.online = false (above)\n# but it is unreasonable to set the entire users collection to false on startup.\nMeteor.startup ->\n  Meteor.users.update {}\n  , $unset: {\n    \"status.online\": null\n    \"status.idle\": null\n    \"status.lastActivity\": null\n  }\n  , {multi: true}\n\n###\n  Local session modifification functions - also used in testing\n###\n\naddSession = (connection) ->\n  UserConnections.upsert connection.id,\n    $set: {\n      ipAddr: connection.clientAddress\n      userAgent: connection.httpHeaders['user-agent']\n    }\n  return\n\nloginSession = (connection, date, userId) ->\n  UserConnections.upsert connection.id,\n    $set: {\n      userId: userId\n      loginTime: date\n    }\n\n  statusEvents.emit \"connectionLogin\",\n    userId: userId\n    connectionId: connection.id\n    ipAddr: connection.clientAddress\n    userAgent: connection.httpHeaders['user-agent']\n    loginTime: date\n  return\n\n# Possibly trigger a logout event if this connection was previously associated with a user ID\ntryLogoutSession = (connection, date) ->\n  return false unless (conn = UserConnections.findOne({\n    _id: connection.id\n    userId: { $exists: true }\n  }))?\n\n  # Yes, this is actually a user logging out.\n  UserConnections.upsert connection.id,\n    $unset: {\n      userId: null\n      loginTime: null\n    }\n\n  statusEvents.emit \"connectionLogout\",\n    userId: conn.userId\n    connectionId: connection.id\n    lastActivity: conn.lastActivity # If this connection was idle, pass the last activity we saw\n    logoutTime: date\n\nremoveSession = (connection, date) ->\n  tryLogoutSession(connection, date)\n  UserConnections.remove(connection.id)\n  return\n\nidleSession = (connection, date, userId) ->\n  UserConnections.update connection.id,\n    $set: {\n      idle: true\n      lastActivity: date\n    }\n\n  statusEvents.emit \"connectionIdle\",\n    userId: userId\n    connectionId: connection.id\n    lastActivity: date\n  return\n\nactiveSession = (connection, date, userId) ->\n  UserConnections.update connection.id,\n    $set: { idle: false }\n    $unset: { lastActivity: null }\n\n  statusEvents.emit \"connectionActive\",\n    userId: userId\n    connectionId: connection.id\n    lastActivity: date\n  return\n\n###\n  Handlers for various client-side events\n###\n\n# Opening and closing of DDP connections\nMeteor.onConnection (connection) ->\n  addSession(connection)\n\n  connection.onClose ->\n    removeSession(connection, new Date())\n\n# Authentication of a DDP connection\nAccounts.onLogin (info) ->\n  loginSession(info.connection, new Date(), info.user._id)\n\n# pub/sub trick as referenced in http://stackoverflow.com/q/10257958/586086\n# We used this in the past, but still need this to detect logouts on the same connection.\nMeteor.publish null, ->\n  # Return null explicitly if this._session is not available, i.e.:\n  # https://github.com/arunoda/meteor-fast-render/issues/41\n  return [] unless @_session?\n\n  # We're interested in logout events - re-publishes for which a past connection exists\n  tryLogoutSession(@_session.connectionHandle, new Date()) unless @userId?\n\n  return []\n\n# We can use the client's timestamp here because it was sent from a TimeSync\n# value, however we should never trust it for something security dependent.\n# If timestamp is not provided (probably due to a desync), use server time.\nMeteor.methods\n  \"user-status-idle\": (timestamp) ->\n    check(timestamp, Match.OneOf(null, undefined, Date, Number) )\n\n    date = if timestamp? then new Date(timestamp) else new Date()\n    idleSession(@connection, date, @userId)\n    return\n\n  \"user-status-active\": (timestamp) ->\n    check(timestamp, Match.OneOf(null, undefined, Date, Number) )\n\n    # We only use timestamp because it's when we saw activity *on the client*\n    # as opposed to just being notified it. It is probably more accurate even if\n    # a dozen ms off due to the latency of sending it to the server.\n    date = if timestamp? then new Date(timestamp) else new Date()\n    activeSession(@connection, date, @userId)\n    return\n\n# Exported variable\nUserStatus =\n  connections: UserConnections\n  events: statusEvents\n\n# Internal functions, exported for testing\nStatusInternals = {\n  addSession,\n  removeSession,\n  loginSession,\n  tryLogoutSession,\n  idleSession,\n  activeSession,\n}\n"]}